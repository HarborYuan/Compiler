let K = @y.@x.y;
let I=@x.x;
let S=@x.@y.@z.x z(y z);
let F=@x.@f.f(f x);
let OMEGA=@x.x x;
let TRUE=@x.@y.x;
let FALSE=@x.@y.y;
let IF=@a.@b.@c.a b c;
let OR=@a.@b.IF a TRUE b;
let AND=@a.@b.IF a b FALSE;
let NOT=@a.IF a FALSE TRUE;
let PAIR=@a.@b.@x.IF x a b;
let FST=@a.a TRUE;
let SND=@a.a FALSE;
let CONS=PAIR;
let HEAD=FST;
let TAIL=SND;
let NIL=@x.TRUE;
let NULL=@a.a(@x.@y.FALSE);
let PNIL=@z.z;
let PCONS=@x.@y.PAIR FALSE (PAIR x x);
let PNULL=FST;
let PHD=@z.FST(SND z);
let PTL=@z.SND(SND z);
let ZERO=@f.@x.x;
let SUCC=@n.@f.@x.f(n f x);
let ONE=SUCC ZERO;
let TWO=SUCC ONE;
let THREE=SUCC TWO;
let FOUR=SUCC THREE;
let FIVE=SUCC FOUR;
let PRED=@n.@f.@x.SND (n(@p.PAIR (f (FST p)) (FST p)) (PAIR x x));
let ISZERO=@n.n (@x.FALSE) TRUE;
let ADD=@a.@b.a SUCC b;
let SUB=@a.@b.b PRED a;
let MULT=@a.@b.a (ADD b) ZERO;
let GE=@a.@b.ISZERO (a PRED b);
let LE=@a.@b.GE b a;
let EQ=@a.@b.AND (GE a b) (LE a b);
let GT=@a.@b.NOT (LE a b);
let LT=@a.@b.NOT (GE a b);
let NE=@a.@b.NOT (EQ a b);
let XADD=@a.@b.@f.@x.a f (b f x);
let XMULT=@a.@b.@f.@x.a(@w.b f w )x;
let PZERO=PAIR ZERO ZERO;
let PSUCC=@p.PAIR(SND p)(SUCC(SND p));
let PREX=@n.(FST(n  PSUCC PZERO));
let PREFN=@f.@p.PAIR(f(FST p))(FST p);
let PRE=@n.@f.@x.SND(n (PREFN f)(PAIR x x));
let REC=@h.(@x.h(x x))(@x.h(x x));
let Y=@f.(@x.f(x x))(@x.f(x x));
let Z=@f.(@x.f(@y.(x x)y))(@x.f(@y.(x x)y));
let FACTA=Z (@f.@n.IF (ISZERO n) ONE (MULT n (f (PRED n))));
let SUM=Z (@f.@n.IF (ISZERO n) ZERO (ADD n (f (PRED n))));
let FACT=Z (@f.@n.IF (ISZERO n) ONE (MULT n (f (PRED n))));
let PSUM=FST (Z (@f.PAIR (@n.IF (ISZERO n) ZERO (ADD n ((SND f) n))) (@n.((FST f) (PRED n)))));
let GETN=Z (@f.@n.@l.IF(NULL l) FALSE (IF (ISZERO n)(HEAD l)(f (PRED n)(TAIL l))));
let fact = (Z (@f.@n. (if (= n 0) then 1 else (* n (f (- n 1))) fi)));

let FIBOGEN=Z (@l.@a.@b.CONS a (l b (ADD a b)));
let FIBO=@x.FIBOGEN ZERO ONE;
let SGB=@x.IF(ISZERO(x))ONE ZERO;
let ISPAIR=Z (@f.@x. IF(ISZERO(x)) ONE (SGB (f(PRED x))));
let DIV=@a.@b.(Z (@f.@m.@c.IF (GT m a) c (f (ADD b m) (SUCC c)))) b ZERO;
let ISPOWTWO=Z @f.@x. IF (ISZERO x) ZERO (IF (ISZERO (PRED x)) ONE (IF (ISZERO (ISPAIR x)) ZERO (f (DIV x TWO))));
let ISPOWTWOA=Z @f.@x. IF (ISZERO x) ZERO (IF (ISZERO (PRED x)) ONE (IF (ISZERO (ISPAIR x)) ZERO (f (DIV x TWO))));
let DIV=(Z @f.@p.@m.@n.IF (ISZERO n) ZERO (IF (LT m n) p (f (SUCC p) (SUB m n) n))) ZERO;
let MOD=Z (@f.@m.@n.IF (ISZERO n) ZERO (IF (LT m n) m (f (SUB m n) n)));
let EXPB=@z.@f.@x.(z TWO f x);
let ACK = @m.m(@f.@n.n f(f(@f.@x.f x)))@n.@f.@x.n f(f x);
#=    @n.@f.@x.(n  ((@n.@f.@x.f(n f x))  ((@n.@f.@x.f(n f x)) (@f.@x.x))) f x);
#let iff =fun a b c ->a b c;;
#let truef = fun x y -> x;;
#let falsef =fun x y -> y;;
#let iszero = fun n  -> n (fun x -> falsef) truef;;
#let pair =fun a b x -> iff x a b;;
#let fst = fun a -> a truef;;
#let snd = fun a -> a falsef;;
#let pred= fun n f x -> snd (n(fun p-> pair (f (fst p)) (fst p)) (pair x x));;
#let succ =fun n f x -> f(n f x);;
#let add = fun a b -> a succ b;;
#let zero =fun f x -> x;;
#let xx = (fun f n -> iff (iszero n) zero (add n (f (pred n))));
# so the SUM can't be typed even add Z typed with (A -> A) -> A
#@xx.@yy.ISZERO (xx PRED yy);

#    @s.@t.AND (GE s t) (LE s t);
# @m.m(@f.@n.n f(f(@f.@x.f x)))@n.@f.@x.n f(f x);
let MY=@x.x;
